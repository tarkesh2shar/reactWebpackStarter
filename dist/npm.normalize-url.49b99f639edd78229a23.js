(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{344:function(e,r,t){"use strict";var a=t(345),o=t(133),n=t(350),p=t(352),s=t(353),h=t(94),i={"http:":80,"https:":443,"ftp:":21},m={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0};function c(e,r){return r.some((function(r){return r instanceof RegExp?r.test(e):r===e}))}e.exports=function(e,r){if(r=h({normalizeProtocol:!0,normalizeHttps:!1,stripFragment:!0,stripWWW:!0,removeQueryParameters:[/^utm_\w+/i],removeTrailingSlash:!0,removeDirectoryIndex:!1},r),"string"!=typeof e)throw new TypeError("Expected a string");var t=0===e.indexOf("//");e=p(e.trim()).replace(/^\/\//,"http://");var l=a.parse(e);if(r.normalizeHttps&&"https:"===l.protocol&&(l.protocol="http:"),!l.hostname&&!l.pathname)throw new Error("Invalid URL");delete l.host,delete l.query,r.stripFragment&&delete l.hash;var d=i[l.protocol];if(Number(l.port)===d&&delete l.port,l.pathname&&(l.pathname=l.pathname.replace(/\/{2,}/g,"/")),l.pathname&&(l.pathname=decodeURI(l.pathname)),!0===r.removeDirectoryIndex&&(r.removeDirectoryIndex=[/^index\.[a-z]+$/]),Array.isArray(r.removeDirectoryIndex)&&r.removeDirectoryIndex.length){var v=l.pathname.split("/");c(v[v.length-1],r.removeDirectoryIndex)&&(v=v.slice(0,v.length-1),l.pathname=v.slice(1).join("/")+"/")}if(m[l.protocol]){var f=l.protocol+"//"+l.hostname,y=a.resolve(f,l.pathname);l.pathname=y.replace(f,"")}l.hostname&&(l.hostname=o.toUnicode(l.hostname).toLowerCase(),l.hostname=l.hostname.replace(/\.$/,""),r.stripWWW&&(l.hostname=l.hostname.replace(/^www\./,""))),"?"===l.search&&delete l.search;var u=n.parse(l.search);if(Array.isArray(r.removeQueryParameters))for(var w in u)c(w,r.removeQueryParameters)&&delete u[w];return l.search=n.stringify(s(u)),l.search=decodeURIComponent(l.search),e=a.format(l),(r.removeTrailingSlash||"/"===l.pathname)&&(e=e.replace(/\/$/,"")),t&&!r.normalizeProtocol&&(e=e.replace(/^http:\/\//,"//")),e}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=npm.normalize-url.49b99f639edd78229a23.js.map